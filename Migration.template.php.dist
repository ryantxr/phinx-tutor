<?php
use $useClassName;
// Uncomment the following to use MySQL specific constants
//use Phinx\Db\Adapter\MysqlAdapter;

class $className extends $baseClassName {
    // public function change() { } Uncomment if you want to use.

    public function up() {
        /*
        $this->createNewTable('sample', [
                ['name' => 'put column name here', 'type' => 'string', 'def' => ['null' => true, 'default' => null, 'limit' => 20] ],
                ['name' => 'put column name here', 'type' => 'integer', 'def' => ['null' => false, 'default' => 0, 'limit' => 10] ],
                ['name' => 'put column name here', 'type' => 'integer', 'def' => ['null' => false, 'default' => 0, 'limit' => 10] ],
                // etc
            ]);
            */
    }

    private function createNewTable($name, $columns) {
        $primaryKey = $name . 'Id';
        $table = $this->table($name, ['id' => false, 'primary_key' => $primaryKey, 'charset' => 'utf8', 'collation' => 'utf8_general_ci', 'engine' => 'InnoDB']);
        $table->addColumn($primaryKey, 'integer', ['default' => null, 'null' => false, 'identity' => true, 'signed' => false]);

        if ( count($columns) > 0 ) {
            foreach ($columns as $c) {
                $table->addColumn($c['name'], $c['type'], $c['def']);
            }
        }

        $table->addColumn('created', 'datetime', ['default' => null, 'null' => true])
              ->addColumn('modified', 'datetime', ['default' => null, 'null' => true])
              ->create();

    }

    public function down() {

    }

}

/*
 * Remember to call "create()" or "update()" and NOT "save()" when working
 * with the Table class.

-- addColumn --
        $table = $this->table('TABLE_NAME_GOES_HERE');

        if ( ! $table->hasColumn('COLUMN_NAME_GOES_HERE') ) {
            $table->addColumn('COLUMN_NAME_GOES_HERE', 'integer', array('limit' => 11, 'null' => true, 'signed' => false, 'after' => 'someOtherColumn'))
                ->update();
        }

-- removeColumn --
        $table = $this->table('TABLE_NAME_GOES_HERE');
        $columnNameToRemove = 'COLUMN_NAME_GOES_HERE';
        if ( $table->hasColumn($columnNameToRemove) ) {
            $table->removeColumn($columnNameToRemove)
                ->update();
        }

-- Other column functions --
        $table->renameColumn()
        $table->changeColumn()
        $table->removeIndex()
        $table->addForeignKey()
        $table->dropForeignKey()

-- How to Tiny int --
        use Phinx\Db\Adapter\MysqlAdapter;
        $merchant->addColumn('COLUMN_NAME_GOES_HERE', 'integer', ['signed' => false, 'null' => false, 'default' => 0, 'limit' => MysqlAdapter::INT_TINY, 'after' => 'tags'])

-- How to Tiny boolean
    $table->changeColumn('COLUMN_NAME_GOES_HERE', 'boolean', array('signed' => false, 'default' => false))
        ->update();

-- How to index a column --
        $table->addColumn('COLUMN_NAME_GOES_HERE', 'string', array('limit' => 50, 'null' => true, 'default' => null, 'after' => 'path'))
            ->addIndex(['COLUMN_NAME_GOES_HERE'], ['unique' => true])
            ->update();

-- Drop table --
        $this->dropTable('TABLE_NAME_GOES_HERE');

-- Rename table --
        $table = $this->table('OLD_TABLE_NAME');
        $table->rename('NEW_TABLE_NAME');

*/
